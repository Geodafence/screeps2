import { Lremove } from "../libs/general.functions";
// Comments are generated by ChatGPT, so they may be a little inaccurate
    export function register(memlink, creep, override=false, overridebase={}) {
        // Initialize a termination flag
        let terminate = 0;

        // If override is enabled, use overridebase instead of Memory
        if(override) {
            // Check if the creep is not already registered to a source
            if(creep.memory.registeredsource == 0 || creep.memory.registeredsource == undefined) {
                // Find all sources in the current room
                var sources = creep.room.find(FIND_SOURCES);

                // Iterate over each source
                for(var I = 0; I < sources.length; I++) {
                    if(terminate == 0) {
                        // If the source ID is not in overridebase[memlink], register it to the creep
                        if(!overridebase[memlink].includes(sources[I].id)) {
                            overridebase[memlink].push(sources[I].id);
                            creep.memory.registeredsource = sources[I].id;
                            return overridebase;
                        }
                    }
                }
            }
        } else {
            // If override is disabled, use Memory[memlink] for source registration
            if(creep.memory.registeredsource == 0 || creep.memory.registeredsource === undefined) {
                var sources = creep.room.find(FIND_SOURCES);

                // Iterate over each source
                for(var I = 0; I < sources.length; I++) {
                    if(terminate == 0) {
                        // If the source ID is not in Memory[memlink], register it to the creep
                        if(!Memory[memlink].includes(sources[I].id)) {
                            Memory[memlink].push(sources[I].id);
                            creep.memory.registeredsource = sources[I].id;
                            terminate = 1;
                        }
                    }
                }
            }
        }
    }

    /**
     *
     * @param {Creep} creep
     * @returns
     */
    export function harvest(creep) {
        // Get the source object by the registered source ID
        var sourceid = Game.getObjectById(creep.memory.registeredsource);

        // Attempt to harvest the source
        let errlog = creep.harvest(sourceid);

        // If the creep is not in range, move it towards the source
        if(errlog == ERR_NOT_IN_RANGE) {
            creep.moveTo(sourceid, {reusePath: 30, visualizePathStyle: {stroke: '#ffffff'}});
        }
        return errlog
    }

    export function remove(memlink, creep, override=false, overridebase=0) {
        // If the creep has a registered source
        if(creep.memory.registeredsource !== 0 || creep.memory.registeredsource !== undefined) {
            if(override) {
                // If override is enabled, use overridebase to remove the source ID
                overridebase[memlink] = Lremove(overridebase[memlink],creep.memory.registeredsource)
                creep.memory.registeredsource = 0;
            } else {
                // If override is disabled, use Memory[memlink] to remove the source ID
                Memory[memlink] = Lremove(Memory[memlink],creep.memory.registeredsource)
                creep.memory.registeredsource = 0;
            }
        }
    }
