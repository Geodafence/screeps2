
import { Id } from "../../typings/helpers";
import { Lremove } from "./general.functions";
// Comments are generated by ChatGPT, so they may be a little inaccurate
    export function register(memlink:string, creep:Creep, override=false, overridebase={}) {
        // Initialize a termination flag
        let terminate = 0;

        // If override is enabled, use overridebase instead of Memory
        if(override) {
            // Check if the creep is not already registered to a source
            if(creep.memory.registeredsource == 0 || creep.memory.registeredsource == undefined) {
                // Find all sources in the current room
                var sources = creep.room.find(FIND_SOURCES);

                // Iterate over each source
                for(var I = 0; I < sources.length; I++) {
                    if(terminate == 0) {
                        // If the source ID is not in overridebase[memlink], register it to the creep
                        //@ts-ignore
                        if(!overridebase[memlink].includes(sources[I].id)) {
                            //@ts-ignore
                            overridebase[memlink].push(sources[I].id);
                            creep.memory.registeredsource = sources[I].id;
                            //@ts-ignore
                            return overridebase[memlink];
                        }
                    }
                }
            }
        } else {
            // If override is disabled, use Memory[memlink] for source registration
            if(creep.memory.registeredsource == 0 || creep.memory.registeredsource === undefined) {
                var sources = creep.room.find(FIND_SOURCES);

                // Iterate over each source
                for(var I = 0; I < sources.length; I++) {
                    if(terminate == 0) {
                        // If the source ID is not in Memory[memlink], register it to the creep
                        //@ts-ignore
                        if(!Memory[memlink].includes(sources[I].id)) {
                            //@ts-ignore
                            Memory[memlink].push(sources[I].id);
                            creep.memory.registeredsource = sources[I].id;
                            //@ts-ignore
                            return Memory[memlink]
                        }
                    }
                }
            }
        }
        return null
    }
    /**
     *
     * @param {Creep} creep
     * @returns
     */
    export function harvest(creep:Creep) {
            if(creep.memory.registeredsource!==undefined&&typeof creep.memory.registeredsource!=="number") {
            // Get the source object by the registered source ID
            var sourceid = Game.getObjectById(creep.memory.registeredsource);

            // Attempt to harvest the source
            //@ts-ignore
            let errlog = creep.harvest(sourceid);

            // If the creep is not in range, move it towards the source
            if(errlog == ERR_NOT_IN_RANGE) {
                //@ts-ignore
                creep.moveTo(sourceid, {reusePath: 30, visualizePathStyle: {stroke: '#ffffff'}});
            }
            return errlog
        }
        return -1
    }

    export function remove(memlink:string, creep:Creep|{memory:CreepMemory}, override=false, overridebase:number|{}=0) {
        // If the creep has a registered source
        if(creep.memory.registeredsource !== 0 || creep.memory.registeredsource !== undefined) {
            if(override) {
                // If override is enabled, use overridebase to remove the source ID
                //@ts-ignore
                overridebase[memlink] = Lremove(overridebase[memlink],creep.memory.registeredsource)
                creep.memory.registeredsource = 0;
            } else {
                // If override is disabled, use Memory[memlink] to remove the source ID
                //@ts-ignore
                Memory[memlink] = Lremove(Memory[memlink],creep.memory.registeredsource)
                creep.memory.registeredsource = 0;
            }
        }
    }
